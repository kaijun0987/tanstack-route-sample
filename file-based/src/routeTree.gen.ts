/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './module/__root'
import { Route as UserMainImport } from './module/user/main'
import { Route as GameMainImport } from './module/game/main'
import { Route as MainImport } from './module/main'
import { Route as UserHomeImport } from './module/user/home'
import { Route as GamePlayerImport } from './module/game/player'
import { Route as UserUsersIdMainImport } from './module/user/$usersId/main'
import { Route as GameUserUserIdImport } from './module/game/user.$userId'

// Create/Update Routes

const UserMainRoute = UserMainImport.update({
  id: '/user',
  path: '/user',
  getParentRoute: () => rootRoute,
} as any)

const GameMainRoute = GameMainImport.update({
  id: '/game',
  path: '/game',
  getParentRoute: () => rootRoute,
} as any)

const MainRoute = MainImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const UserHomeRoute = UserHomeImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => UserMainRoute,
} as any)

const GamePlayerRoute = GamePlayerImport.update({
  id: '/player',
  path: '/player',
  getParentRoute: () => GameMainRoute,
} as any)

const UserUsersIdMainRoute = UserUsersIdMainImport.update({
  id: '/$usersId',
  path: '/$usersId',
  getParentRoute: () => UserMainRoute,
} as any)

const GameUserUserIdRoute = GameUserUserIdImport.update({
  id: '/user/$userId',
  path: '/user/$userId',
  getParentRoute: () => GameMainRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof MainImport
      parentRoute: typeof rootRoute
    }
    '/game': {
      id: '/game'
      path: '/game'
      fullPath: '/game'
      preLoaderRoute: typeof GameMainImport
      parentRoute: typeof rootRoute
    }
    '/user': {
      id: '/user'
      path: '/user'
      fullPath: '/user'
      preLoaderRoute: typeof UserMainImport
      parentRoute: typeof rootRoute
    }
    '/user/$usersId': {
      id: '/user/$usersId'
      path: '/$usersId'
      fullPath: '/user/$usersId'
      preLoaderRoute: typeof UserUsersIdMainImport
      parentRoute: typeof UserMainImport
    }
    '/game/player': {
      id: '/game/player'
      path: '/player'
      fullPath: '/game/player'
      preLoaderRoute: typeof GamePlayerImport
      parentRoute: typeof GameMainImport
    }
    '/user/': {
      id: '/user/'
      path: '/'
      fullPath: '/user/'
      preLoaderRoute: typeof UserHomeImport
      parentRoute: typeof UserMainImport
    }
    '/game/user/$userId': {
      id: '/game/user/$userId'
      path: '/user/$userId'
      fullPath: '/game/user/$userId'
      preLoaderRoute: typeof GameUserUserIdImport
      parentRoute: typeof GameMainImport
    }
  }
}

// Create and export the route tree

interface GameMainRouteChildren {
  GamePlayerRoute: typeof GamePlayerRoute
  GameUserUserIdRoute: typeof GameUserUserIdRoute
}

const GameMainRouteChildren: GameMainRouteChildren = {
  GamePlayerRoute: GamePlayerRoute,
  GameUserUserIdRoute: GameUserUserIdRoute,
}

const GameMainRouteWithChildren = GameMainRoute._addFileChildren(
  GameMainRouteChildren,
)

interface UserMainRouteChildren {
  UserUsersIdMainRoute: typeof UserUsersIdMainRoute
  UserHomeRoute: typeof UserHomeRoute
}

const UserMainRouteChildren: UserMainRouteChildren = {
  UserUsersIdMainRoute: UserUsersIdMainRoute,
  UserHomeRoute: UserHomeRoute,
}

const UserMainRouteWithChildren = UserMainRoute._addFileChildren(
  UserMainRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof MainRoute
  '/game': typeof GameMainRouteWithChildren
  '/user': typeof UserMainRouteWithChildren
  '/user/$usersId': typeof UserUsersIdMainRoute
  '/game/player': typeof GamePlayerRoute
  '/user/': typeof UserHomeRoute
  '/game/user/$userId': typeof GameUserUserIdRoute
}

export interface FileRoutesByTo {
  '/': typeof MainRoute
  '/game': typeof GameMainRouteWithChildren
  '/user/$usersId': typeof UserUsersIdMainRoute
  '/game/player': typeof GamePlayerRoute
  '/user': typeof UserHomeRoute
  '/game/user/$userId': typeof GameUserUserIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof MainRoute
  '/game': typeof GameMainRouteWithChildren
  '/user': typeof UserMainRouteWithChildren
  '/user/$usersId': typeof UserUsersIdMainRoute
  '/game/player': typeof GamePlayerRoute
  '/user/': typeof UserHomeRoute
  '/game/user/$userId': typeof GameUserUserIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/game'
    | '/user'
    | '/user/$usersId'
    | '/game/player'
    | '/user/'
    | '/game/user/$userId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/game'
    | '/user/$usersId'
    | '/game/player'
    | '/user'
    | '/game/user/$userId'
  id:
    | '__root__'
    | '/'
    | '/game'
    | '/user'
    | '/user/$usersId'
    | '/game/player'
    | '/user/'
    | '/game/user/$userId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  MainRoute: typeof MainRoute
  GameMainRoute: typeof GameMainRouteWithChildren
  UserMainRoute: typeof UserMainRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  MainRoute: MainRoute,
  GameMainRoute: GameMainRouteWithChildren,
  UserMainRoute: UserMainRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/game",
        "/user"
      ]
    },
    "/": {
      "filePath": "main.tsx"
    },
    "/game": {
      "filePath": "game/main.tsx",
      "children": [
        "/game/player",
        "/game/user/$userId"
      ]
    },
    "/user": {
      "filePath": "user/main.tsx",
      "children": [
        "/user/$usersId",
        "/user/"
      ]
    },
    "/user/$usersId": {
      "filePath": "user/$usersId/main.tsx",
      "parent": "/user"
    },
    "/game/player": {
      "filePath": "game/player.tsx",
      "parent": "/game"
    },
    "/user/": {
      "filePath": "user/home.tsx",
      "parent": "/user"
    },
    "/game/user/$userId": {
      "filePath": "game/user.$userId.tsx",
      "parent": "/game"
    }
  }
}
ROUTE_MANIFEST_END */
